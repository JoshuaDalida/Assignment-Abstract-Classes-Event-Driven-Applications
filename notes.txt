ReservatonManager
	Finish Available seates
		How do i know how much seats are taken?
	JsonFile
		the is the \r going to mess this up?
	LoadFromFile
		how do i make a string into the flight name and how is that going to affect the constructor

FlightManager
	Which list do i use/populate (the _flights or flights)

Flight.razor
	Need to make form uneditable 

	        public string CSVFilePath
        {
            get
            {
                /**
                 * Just using File.ReadAllLines("Data\\employees.csv") will result in trying to read the file from C:\Windows\System32\....
                 * Instead, we need to get the directory for the running executable and concat "Data\employees.csv" to that.
                 */
                string currentDir = AppDomain.CurrentDomain.BaseDirectory;
                string filePath = Path.Combine(currentDir, "Data\\employees.csv");

                return filePath;
            }
        
                public string CSVFilePath
        {
            get
            {
                /**
                 * Just using File.ReadAllLines("Data\\employees.csv") will result in trying to read the file from C:\Windows\System32\....
                 * Instead, we need to get the directory for the running executable and concat "Data\employees.csv" to that.
                 */
                string currentDir = AppDomain.CurrentDomain.BaseDirectory;
                string filePath = Path.Combine(currentDir, "Data\\employees.csv");

                return filePath;
            }
        }

        private void LoadEmployeesFromFile()
        {
            this.AllEmployees.Clear();

            // Check if JSON file exists
            if (File.Exists(this.JSONFilePath))
            {
                // Load file contents
                string contents = File.ReadAllText(this.JSONFilePath);

                // Decode it from JSON
                // The type must be exactly the same that was used for serializing.
                object employeesObj = JsonSerializer.Deserialize(contents, this.AllEmployees.GetType());

                List<Employee> employees = employeesObj as List<Employee>;

                // Ensure JSON data was decoded as List<Employee> type
                if (employees == null) 
                {
                    this.DisplayAlert("Error", "Unable to decode from JSON file.", "OK");
                    return;
                }

                // Add all employees from JSON file
                foreach (Employee employee in employees)
                {
                    this.AllEmployees.Add(employee);
                }
            } 
            else
            {
                // If not, load from CSV file.
                string[] lines = File.ReadAllLines(this.CSVFilePath);

                foreach (string line in lines)
                {
                    string[] columns = line.Split(',');

                    int id = int.Parse(columns[0]);
                    string name = columns[1];
                    bool isActive = bool.Parse(columns[2]);

                    Employee employee = new Employee(id, name, isActive);

                    this.AllEmployees.Add(employee);
                }
            }

            
        }

        
        /// <summary>
        /// Gets the full path to the CSV file.
        /// </summary>
        public string CSVFilePath
        {
            get
            {
                /**
                 * Just using File.ReadAllLines("Data\\employees.csv") will result in trying to read the file from C:\Windows\System32\....
                 * Instead, we need to get the directory for the running executable and concat "Data\employees.csv" to that.
                 */
                string currentDir = AppDomain.CurrentDomain.BaseDirectory;
                string filePath = Path.Combine(currentDir, "Data\\employees.csv");

                return filePath;
            }
        }

        /// <summary>
        /// Gets the full path to the JSON file.
        /// </summary>
        public string JSONFilePath
        {
            get
            {
                string currentDir = AppDomain.CurrentDomain.BaseDirectory;
                string filePath = Path.Combine(currentDir, "Data\\employees.json");

                return filePath;
            }
        }